/* 
 * Copyright (c) 2011, Alex Krizhevsky (akrizhevsky@gmail.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * 
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <algorithm>
#include <data.cuh>

using namespace std;

DataProvider::DataProvider(int minibatchSize) : 
    _minibatchSize(minibatchSize), _hData(NULL) {

}

GPUData& DataProvider::operator[](int idx) {
    return getMinibatch(idx);
}

void DataProvider::clearData() {
    delete _hData;
    _hData = NULL;
    _dataSize = 0;
}

void DataProvider::setData(CPUData& hData) {
    // This is now deleted by the DataWorker's destructor
//    delete _hData; // Delete old CPU matrices

    _hData = &hData;
    _dataSize = 0;
    for (int i = 0; i < hData.getSize(); i++) {
        _dataSize += hData[i].getNumDataBytes();
    }
    _dataSize /= 1024 * 1024;
    if (_dataSize < MAX_DATA_ON_GPU) {
        for (int i = 0; i < hData.getSize(); i++) {
            if (i >= _data.size()) {
                _data.push_back(new NVMatrix());
            }
            _data[i]->copyFromHost(hData[i], true);
        }
    }
}

GPUData& DataProvider::getMinibatch(int idx) {
    assert(idx >= 0 && idx < getNumMinibatches());
    return getDataSlice(idx * _minibatchSize, (idx + 1) * _minibatchSize);
}

#include "primes.h"
GPUData& DataProvider::getMinibatchRnd(int idx, int prime_ind, vector<int> mini2pos)
{
	assert(idx >= 0 && idx < getNumMinibatches());
	assert(prime_ind < sizeof(primes)/sizeof(int));
	int prime_sector = primes[prime_ind];
	
	return getPrimeDataSlice(idx * _minibatchSize,  min(_hData->getNumCases(), (idx + 1) * _minibatchSize), prime_sector, mini2pos);
};

void getSlice(bool trans, int case_ind, int start, int end, int startCase, int endCase, NVMatrix* src, NVMatrix* target)
{
	if (trans) {

		int startRow = start;
		int endRow = end;

		int startCol = 0;
		int endCol = src->getNumCols();
		src->_checkBounds(startRow, endRow, startCol, endCol);

		int sliceRows = endCase - startCase, sliceCols = endCol - startCol;
		if (target->getNumRows() != sliceRows || target->getNumCols() != sliceCols) {
			target->resize(sliceRows, sliceCols);
		}
		src->copy(*target, startRow, endRow, startCol, endCol, case_ind-startCase, 0);

	} else {

		int startCol = start;
		int endCol = end;

		int startRow = 0;
		int endRow = src->getNumRows();
		src->_checkBounds(startRow, endRow, startCol, endCol);

		int sliceRows = endRow - startRow, sliceCols = endCase - startCase;
		if (target->getNumRows() != sliceRows || target->getNumCols() != sliceCols) {
			target->resize(sliceRows, sliceCols);
		}

		src->copy(*target, startRow, endRow, startCol, endCol, 0, case_ind-startCase);
	
	}
}

GPUData& DataProvider::getPrimeDataSlice(int startCase, int endCase, int prime, vector<int> mini2pos)
{
    assert(_hData != NULL);
    assert(_hData->getNumCases() > 0);
    
    NVMatrixV& miniData = *new NVMatrixV();

    for (int i = 0; i < _hData->getData().size(); i++)
	{
	    bool trans = _data[i]->isTrans();

        miniData.push_back(new NVMatrix());

		for(int cind = startCase; cind < endCase; cind++)
		{
			NVMatrix* src = _data[i];
			NVMatrix* target = miniData[i];
			int cpos = (cind*prime)%_hData->getNumCases();

			if(i==0)
				mini2pos.push_back(cpos);

			getSlice(trans, cind, cpos, cpos+1, startCase, endCase, src, target);
		}

//        if (_data[i]->isTrans()) {
//			for(int cind = startCase; cind < endCase; cind++)
//			{
////for test only, not optimised
//				int cpos = (cind*prime)%_hData->getNumCases();
//
//				NVMatrix* src = _data[i];
//				NVMatrix* target = miniData[i];
//				int startRow = cpos;
//				int endRow = cpos+1;
//
//				int startCol = 0;
//				int endCol = src->getNumCols();
//				src->_checkBounds(startRow, endRow, startCol, endCol);
//
//				int sliceRows = endCase - startCase, sliceCols = endCol - startCol;
//				if (target->getNumRows() != sliceRows || target->getNumCols() != sliceCols) {
//					target->resize(sliceRows, sliceCols);
//				}
//				src->copy(*target, startRow, endRow, startCol, endCol, cind-startCase, 0);
//
//			}
//
//        } else {
//
//
//			for(int cind = startCase; cind < endCase; cind++)
//			{
////for test only, not optimised
//				int cpos = (cind*prime)%_hData->getNumCases();
//
//				NVMatrix* src = _data[i];
//				NVMatrix* target = miniData[i];
//				int startCol = cpos;
//				int endCol = cpos+1;
//
//				int startRow = 0;
//				int endRow = src->getNumRows();
//				src->_checkBounds(startRow, endRow, startCol, endCol);
//
//				int sliceRows = endRow - startRow, sliceCols = endCase - startCase;
//				if (target->getNumRows() != sliceRows || target->getNumCols() != sliceCols) {
//					target->resize(sliceRows, sliceCols);
//				}
//
//				src->copy(*target, startRow, endRow, startCol, endCol, 0, cind-startCase);
//
//			}
//
//        }
    }

    return *new GPUData(miniData);
};

GPUData& DataProvider::getDataSlice(int startCase, int endCase) {
    assert(_hData != NULL);
    assert(_hData->getNumCases() > 0);
    
    NVMatrixV& miniData = *new NVMatrixV();
    
    for (int i = 0; i < _hData->getData().size(); i++) {
        miniData.push_back(new NVMatrix());
        if (_dataSize < MAX_DATA_ON_GPU) {
            if (_data[i]->isTrans()) {
                _data[i]->sliceRows(startCase, min(_hData->getNumCases(), endCase), *miniData[i]);
            } else {
                _data[i]->sliceCols(startCase, min(_hData->getNumCases(), endCase), *miniData[i]);
            }
        } else {
            Matrix tmp;
            if ((*_hData)[i].isTrans()) {
                (*_hData)[i].sliceRows(startCase, min(_hData->getNumCases(), endCase), tmp);
            } else {
                (*_hData)[i].sliceCols(startCase, min(_hData->getNumCases(), endCase), tmp);
            }
            miniData.back()->copyFromHost(tmp, true);
        }
    }

    return *new GPUData(miniData);
}

int DataProvider::getNumMinibatches() {
    assert(_hData != NULL);
    assert(_hData->getNumCases() > 0);
    return DIVUP(_hData->getNumCases(), _minibatchSize);
}

int DataProvider::getMinibatchSize() {
    return _minibatchSize;
}

int DataProvider::getNumCases() {
    assert(_hData != NULL);
    assert(_hData->getNumCases() > 0);
    return _hData->getNumCases();
}

int DataProvider::getNumCasesInMinibatch(int idx) {
    assert(_hData != NULL);
    assert(_hData->getNumCases() > 0);
    assert(idx >= 0 && idx < getNumMinibatches());
    return min(_minibatchSize, max(0, _hData->getNumCases() - idx * _minibatchSize));
}